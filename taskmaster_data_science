{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Purpose\n",
    "* This analysis is looking at the British pannel show / gameshow Taskmaster \n",
    "* The main hypothesis is is there a strong correlation with overall performance at the end of ep 5 and overall series performance (end of episode 10)\n",
    "\n",
    "### About Taskmaster\n",
    "* Each season (series) is a group of 5 comedians doing 5-7 tasks per episode, scoring points to determine both an episode and overall series winner\n",
    "* Tasks can be objective or subjective, with subjective tasks having the same judge\n",
    "* You can watch the first 11 series on YouTube, I recommend series 4, 7, and 11. 13 and 14 are also good if you can find them\n",
    "* a great example of a task is https://www.youtube.com/watch?v=_UgSDcHPgCc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#notebook { padding-top:0px !important; } .container { width:97% !important; } .end_space { min-height:0px !important; } </style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pygs\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "#don't show warning flags\n",
    "pd.options.mode.chained_assignment = None\n",
    "%matplotlib inline\n",
    "\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\n",
    "    '<style>'\n",
    "        '#notebook { padding-top:0px !important; } ' \n",
    "        '.container { width:97% !important; } '\n",
    "        '.end_space { min-height:0px !important; } '\n",
    "    '</style>'\n",
    "))\n",
    "\n",
    "def melt_task_performance(tasks):\n",
    "    tasks = pd.melt(tasks, id_vars = ['episode_key', 'task_num'], var_name = 'seat_number', value_name = 'task_score')\n",
    "    tasks = tasks.replace({'seat_number' : {'seat_1_score' : 1, 'seat_2_score' : 2, 'seat_3_score' : 3, 'seat_4_score' : 4, 'seat_5_score' : 5}})\n",
    "    return tasks\n",
    "\n",
    "def mark_dq(tasks):\n",
    "    tasks['is_dq'] = tasks['task_score'] == 'DQ'\n",
    "    tasks = tasks.replace({'task_score' : {'DQ' : 0}})\n",
    "    return tasks\n",
    "\n",
    "def apply_int_type(tasks, int_columns):\n",
    "    tasks[int_columns] = tasks[int_columns].apply(pd.to_numeric, errors='coerce')\n",
    "    return tasks\n",
    "\n",
    "def apply_bol_type(tasks):\n",
    "    bool_columns = tasks.columns.tolist()\n",
    "    bool_columns = [column for column in bool_columns if \"is_\" in column]\n",
    "    tasks[bool_columns] = tasks[bool_columns].replace({'TRUE': True, 'FALSE': False})\n",
    "    return tasks\n",
    "\n",
    "def get_won_tiebreaker(tasks):\n",
    "    tasks = tasks.loc[(tasks['is_tie_breaker'] == True) & (tasks['task_score'] == 1)]\n",
    "    tasks = tasks[['task_num', 'seat_number', 'task_score', 'series_name', 'series_num', 'episode_num']]\n",
    "    tasks.rename({'task_score':'won_tiebreaker'}, axis = 1, inplace=True)\n",
    "    return tasks\n",
    "\n",
    "def drop_tiebreaker(tasks):\n",
    "    tasks = tasks.loc[(tasks['is_tie_breaker'] != True)]\n",
    "    tasks.drop(['is_tie_breaker'],axis=1, inplace=True)\n",
    "    return tasks\n",
    "\n",
    "def drop_short_series(tasks, cutoff_series_length):\n",
    "    tasks['series_length'] = tasks.groupby('series_num').episode_num.transform('max')\n",
    "    tasks = tasks.loc[(tasks['series_length'] >= cutoff_series_length)]\n",
    "    tasks.drop(['series_length'],axis=1, inplace=True)\n",
    "    return tasks\n",
    "\n",
    "def aggregate_tasks(tasks, agg_level):\n",
    "    if agg_level == 'episode':\n",
    "        tasks = tasks.groupby(['contestant_name','seat_number', 'series_num', 'series_name', 'episode_num']).agg({'task_score':'sum'})\n",
    "        tasks = tasks.sort_values(by = ['series_name', 'series_num', 'episode_num', 'seat_number']).reset_index()\n",
    "    elif agg_level == 'series':\n",
    "        tasks = tasks.groupby(['contestant_name','seat_number', 'series_num', 'series_name']).agg({'task_score':'sum'})\n",
    "        tasks = tasks.sort_values(by = ['series_name', 'series_num', 'seat_number']).reset_index()\n",
    "    else:\n",
    "        print(\"Invalid aggregation\")\n",
    "        tasks = tasks\n",
    "    return tasks\n",
    "\n",
    "def add_tiebreaker(tasks, tiebreaker, agg_level):\n",
    "    #could look if the tasks DF has a task number value but this is good enough for now\n",
    "    if agg_level == 'task':\n",
    "        tasks = pd.merge(tasks, tiebreaker, on=['seat_number', 'series_num', 'series_name', 'episode_num', 'task_num'], how='left')\n",
    "        tasks['won_tiebreaker'] = tasks['won_tiebreaker'].fillna(0)\n",
    "    elif agg_level == 'episode':\n",
    "        tiebreaker = tiebreaker[['seat_number', 'series_num', 'series_name', 'episode_num', 'won_tiebreaker']]\n",
    "        tasks = pd.merge(tasks, tiebreaker, on=['seat_number', 'series_num', 'series_name', 'episode_num'], how='left')\n",
    "        tasks['won_tiebreaker'] = tasks['won_tiebreaker'].fillna(0)\n",
    "    else:\n",
    "        print(\"Invalid aggregation\")\n",
    "        tasks = tasks\n",
    "    return tasks\n",
    "\n",
    "def episode_rank(tasks):\n",
    "    tasks['tiebreaker_task_score'] = tasks['task_score'] + tasks['won_tiebreaker']\n",
    "    tasks['episode_rank'] = tasks.groupby(['series_name', 'series_num', 'episode_num'])['tiebreaker_task_score'].rank(method=\"dense\", ascending=False)\n",
    "    tasks.drop(['tiebreaker_task_score',],axis=1, inplace=True)\n",
    "    return tasks\n",
    "\n",
    "def series_rank(tasks):\n",
    "    tasks['series_total'] = tasks.groupby(['series_name', 'series_num', 'seat_number']).running_task_score.transform('max')\n",
    "    #there has never been a series tiebreaker so no need to account for it right now\n",
    "    tasks['series_rank'] = tasks.groupby(['series_name', 'series_num'])['series_total'].rank(method=\"dense\", ascending=False)\n",
    "    return tasks\n",
    "\n",
    "def inverse_rank(tasks):\n",
    "    #we inverse so that higher numbers are better to make it conceptually easier\n",
    "    tasks['running_episode_rank_inverse'] = 6 - tasks['running_episode_rank']\n",
    "    tasks['series_rank_inverse'] = 6 - tasks['series_rank']\n",
    "    tasks['episode_rank_inverse'] = 6 - tasks['episode_rank']\n",
    "    return tasks\n",
    "\n",
    "def myfunc(x):\n",
    "    return slope * x + intercept\n",
    "\n",
    "def show_regression(x, y):\n",
    "    mymodel = list(map(myfunc, x))\n",
    "    print('r: {}\\np: {}\\nbeta: {}'.format(r,p,slope))\n",
    "    plt.scatter(x, y)\n",
    "    plt.plot(x, mymodel)\n",
    "    plt.show()\n",
    "    \n",
    "def crosstab(x, y, percent = False):\n",
    "    if percent:\n",
    "        crosstab = pd.crosstab(x, y, normalize='index')\n",
    "    else:\n",
    "        crosstab = pd.crosstab(x, y)\n",
    "    return crosstab\n",
    "\n",
    "def make_heatmap(tasks):\n",
    "    plt.figure(figsize=(12,8))\n",
    "    sns.heatmap(tasks, annot=True, cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get Taskmaster information\n",
    "This information was transcribed by hand from the Taskmaster Wiki"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>episode_key</th>\n",
       "      <th>task_num</th>\n",
       "      <th>seat_number</th>\n",
       "      <th>task_score</th>\n",
       "      <th>series_name</th>\n",
       "      <th>series_num</th>\n",
       "      <th>episode_num</th>\n",
       "      <th>episode_name</th>\n",
       "      <th>task_description</th>\n",
       "      <th>is_prize</th>\n",
       "      <th>is_live</th>\n",
       "      <th>is_team</th>\n",
       "      <th>is_bonus</th>\n",
       "      <th>is_special</th>\n",
       "      <th>is_dq</th>\n",
       "      <th>contestant_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>UK_6_1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>UK</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>The old soft curved padlock</td>\n",
       "      <td>Prize: Best liquid.</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Alice Levine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>UK_6_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>UK</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>The old soft curved padlock</td>\n",
       "      <td>Perform the best stunt, using this wheelbarrow.</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Alice Levine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>UK_6_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>UK</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>The old soft curved padlock</td>\n",
       "      <td>Make the highest tower using only what's in th...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Alice Levine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>UK_6_1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>UK</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>The old soft curved padlock</td>\n",
       "      <td>Wearing a hat, kiss the portrait of the Taskma...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>Alice Levine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>UK_6_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>UK</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>The old soft curved padlock</td>\n",
       "      <td>Live: Sort the objects under the table in orde...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>Alice Levine</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    episode_key  task_num  seat_number  task_score series_name  series_num  \\\n",
       "187      UK_6_1       1.0            1           4          UK           6   \n",
       "188      UK_6_1       2.0            1           5          UK           6   \n",
       "189      UK_6_1       3.0            1           4          UK           6   \n",
       "190      UK_6_1       4.0            1           5          UK           6   \n",
       "191      UK_6_1       5.0            1           0          UK           6   \n",
       "\n",
       "     episode_num                 episode_name  \\\n",
       "187            1  The old soft curved padlock   \n",
       "188            1  The old soft curved padlock   \n",
       "189            1  The old soft curved padlock   \n",
       "190            1  The old soft curved padlock   \n",
       "191            1  The old soft curved padlock   \n",
       "\n",
       "                                      task_description  is_prize  is_live  \\\n",
       "187                                Prize: Best liquid.      True    False   \n",
       "188    Perform the best stunt, using this wheelbarrow.     False    False   \n",
       "189  Make the highest tower using only what's in th...     False    False   \n",
       "190  Wearing a hat, kiss the portrait of the Taskma...     False    False   \n",
       "191  Live: Sort the objects under the table in orde...     False     True   \n",
       "\n",
       "     is_team  is_bonus  is_special  is_dq contestant_name  \n",
       "187    False     False       False  False    Alice Levine  \n",
       "188    False     False       False  False    Alice Levine  \n",
       "189    False     False       False  False    Alice Levine  \n",
       "190    False     False       False  False    Alice Levine  \n",
       "191    False     False       False   True    Alice Levine  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taskmaster_data_url = '1eicuaLYfHNMMAVLYeIBtAqGrQO_EDdOKaW00rFDFMuw'\n",
    "task_breakdown = pygs.read_google_sheet(spreadsheetId = taskmaster_data_url, sheet_name=\"Task Info\")\n",
    "\n",
    "needed_task_metadata = task_breakdown[['series_name', 'series_num', 'episode_num', 'episode_key', 'episode_name', 'task_num', 'task_description', 'is_prize', 'is_live', 'is_team', 'is_bonus', 'is_special', 'is_tie_breaker', 'is_objective']]\n",
    "task_breakdown_melt = melt_task_performance(task_breakdown[['episode_key', 'task_num', 'seat_1_score', 'seat_2_score', 'seat_3_score', 'seat_4_score', 'seat_5_score']])\n",
    "\n",
    "#drop instances of contestant not participating in a task (this usually occurs in tiebreakers or special tasks)\n",
    "task_breakdown_melt = task_breakdown_melt.loc[(task_breakdown_melt['task_score'] != 'N/A')]\n",
    "\n",
    "taskmaster_info = pd.merge(task_breakdown_melt, needed_task_metadata, on=['episode_key', 'task_num'], how='left')\n",
    "taskmaster_info = mark_dq(taskmaster_info)\n",
    "\n",
    "taskmaster_info_int_columns = ['task_num','task_score', 'series_num', 'episode_num']\n",
    "taskmaster_info = apply_int_type(taskmaster_info, taskmaster_info_int_columns)\n",
    "taskmaster_info = apply_bol_type(taskmaster_info)\n",
    "won_tiebreaker = get_won_tiebreaker(taskmaster_info)\n",
    "taskmaster_info = drop_tiebreaker(taskmaster_info)\n",
    "\n",
    "#drop is_objective as not used currently\n",
    "taskmaster_info.drop(['is_objective'],axis=1, inplace=True)\n",
    "\n",
    "contestant_info = pygs.read_google_sheet(spreadsheetId = taskmaster_data_url, sheet_name=\"Contestant Info\")\n",
    "contestant_info_int_columns = ['series_num', 'seat_number', 'age_at_first_show_broadcast_date', 'height_cm']\n",
    "contestant_info = apply_int_type(contestant_info, contestant_info_int_columns)\n",
    "\n",
    "taskmaster_info = pd.merge(taskmaster_info, contestant_info[['contestant_name','series_num','series_name','seat_number']], on=['seat_number', 'series_name','series_num'], how='inner')\n",
    "taskmaster_info = drop_short_series(taskmaster_info, 10)\n",
    "taskmaster_info.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#aggregate to the episode level so we can analyze overall performance\n",
    "taskmaster_episode = aggregate_tasks(taskmaster_info, 'episode')\n",
    "taskmaster_episode = add_tiebreaker(taskmaster_episode, won_tiebreaker,'episode')\n",
    "taskmaster_episode = episode_rank(taskmaster_episode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>contestant_name</th>\n",
       "      <th>seat_number</th>\n",
       "      <th>series_num</th>\n",
       "      <th>series_name</th>\n",
       "      <th>episode_num</th>\n",
       "      <th>task_score</th>\n",
       "      <th>won_tiebreaker</th>\n",
       "      <th>episode_rank</th>\n",
       "      <th>running_task_score</th>\n",
       "      <th>running_episode_rank</th>\n",
       "      <th>series_total</th>\n",
       "      <th>series_rank</th>\n",
       "      <th>running_episode_rank_inverse</th>\n",
       "      <th>series_rank_inverse</th>\n",
       "      <th>episode_rank_inverse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alice Levine</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>UK</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>152</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Asim Chaudhry</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>UK</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>159</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Liza Tarbuck</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>UK</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>181</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Russell Howard</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>UK</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>170</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Tim Vine</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>UK</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11</td>\n",
       "      <td>3.0</td>\n",
       "      <td>175</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  contestant_name  seat_number  series_num series_name  episode_num  \\\n",
       "0    Alice Levine            1           6          UK            1   \n",
       "1   Asim Chaudhry            2           6          UK            1   \n",
       "2    Liza Tarbuck            3           6          UK            1   \n",
       "3  Russell Howard            4           6          UK            1   \n",
       "4        Tim Vine            5           6          UK            1   \n",
       "\n",
       "   task_score  won_tiebreaker  episode_rank  running_task_score  \\\n",
       "0          18             1.0           1.0                  18   \n",
       "1           8             0.0           5.0                   8   \n",
       "2          17             0.0           3.0                  17   \n",
       "3          18             0.0           2.0                  18   \n",
       "4          11             0.0           4.0                  11   \n",
       "\n",
       "   running_episode_rank  series_total  series_rank  \\\n",
       "0                   1.0           152          5.0   \n",
       "1                   4.0           159          4.0   \n",
       "2                   2.0           181          1.0   \n",
       "3                   1.0           170          3.0   \n",
       "4                   3.0           175          2.0   \n",
       "\n",
       "   running_episode_rank_inverse  series_rank_inverse  episode_rank_inverse  \n",
       "0                           5.0                  1.0                   5.0  \n",
       "1                           2.0                  2.0                   1.0  \n",
       "2                           4.0                  5.0                   3.0  \n",
       "3                           5.0                  3.0                   4.0  \n",
       "4                           3.0                  4.0                   2.0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#verify no issues by having someone win a tiebreaker but not win episode\n",
    "#taskmaster_episode.loc[(taskmaster_episode['won_tiebreaker'] == 1)& (taskmaster_episode['episode_rank'] != 1)]\n",
    "\n",
    "#get running score totals\n",
    "taskmaster_episode['running_task_score'] = taskmaster_episode.groupby(['series_name','series_num','seat_number'])['task_score'].cumsum()\n",
    "\n",
    "#verify\n",
    "#taskmaster_episode.loc[(taskmaster_episode['contestant_name'] == 'Alice Levine')]\n",
    "\n",
    "taskmaster_episode['running_episode_rank'] = taskmaster_episode.groupby(['series_name', 'series_num', 'episode_num'])['running_task_score'].rank(method=\"dense\", ascending=False)\n",
    "taskmaster_episode = series_rank(taskmaster_episode)\n",
    "\n",
    "taskmaster_episode = inverse_rank(taskmaster_episode)\n",
    "\n",
    "taskmaster_episode.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>series_num</th>\n",
       "      <th>series_name</th>\n",
       "      <th>contestant_name</th>\n",
       "      <th>gender</th>\n",
       "      <th>date_of_birth</th>\n",
       "      <th>star_sign</th>\n",
       "      <th>first_ep_of_series_broadcast_date</th>\n",
       "      <th>age_at_first_show_broadcast_date_days</th>\n",
       "      <th>age_at_first_show_broadcast_date</th>\n",
       "      <th>average_age_in_series_years</th>\n",
       "      <th>greg_age_in_series_days</th>\n",
       "      <th>greg_age_in_series_years</th>\n",
       "      <th>seat_number</th>\n",
       "      <th>university_degree</th>\n",
       "      <th>birth_country</th>\n",
       "      <th>birth_place</th>\n",
       "      <th>distance_from_coast_miles</th>\n",
       "      <th>height_cm</th>\n",
       "      <th>dominant_hand</th>\n",
       "      <th>number_of_children_at_time_of_recording</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>UK</td>\n",
       "      <td>Frank Skinner</td>\n",
       "      <td>male</td>\n",
       "      <td>28-Jan-1957</td>\n",
       "      <td>Aquarius</td>\n",
       "      <td>28-Jul-2015</td>\n",
       "      <td>21365</td>\n",
       "      <td>58</td>\n",
       "      <td>40.67</td>\n",
       "      <td>17241</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>Y</td>\n",
       "      <td>England</td>\n",
       "      <td>West Bromwich</td>\n",
       "      <td>76.96</td>\n",
       "      <td>178.0</td>\n",
       "      <td>R</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>UK</td>\n",
       "      <td>Josh Widdicombe</td>\n",
       "      <td>male</td>\n",
       "      <td>08-Apr-1983</td>\n",
       "      <td>Aries</td>\n",
       "      <td>28-Jul-2015</td>\n",
       "      <td>11799</td>\n",
       "      <td>32</td>\n",
       "      <td>40.67</td>\n",
       "      <td>17241</td>\n",
       "      <td>47</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "      <td>England</td>\n",
       "      <td>London</td>\n",
       "      <td>38.59</td>\n",
       "      <td>169.0</td>\n",
       "      <td>R</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>UK</td>\n",
       "      <td>Romesh Ranganathan</td>\n",
       "      <td>male</td>\n",
       "      <td>27-Mar-1978</td>\n",
       "      <td>Aries</td>\n",
       "      <td>28-Jul-2015</td>\n",
       "      <td>13637</td>\n",
       "      <td>37</td>\n",
       "      <td>40.67</td>\n",
       "      <td>17241</td>\n",
       "      <td>47</td>\n",
       "      <td>4</td>\n",
       "      <td>Y</td>\n",
       "      <td>England</td>\n",
       "      <td>Sussex</td>\n",
       "      <td>20.61</td>\n",
       "      <td>182.0</td>\n",
       "      <td>R</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>UK</td>\n",
       "      <td>Roisin Conaty</td>\n",
       "      <td>female</td>\n",
       "      <td>26-Mar-1979</td>\n",
       "      <td>Aries</td>\n",
       "      <td>28-Jul-2015</td>\n",
       "      <td>13273</td>\n",
       "      <td>36</td>\n",
       "      <td>40.67</td>\n",
       "      <td>17241</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>Y</td>\n",
       "      <td>England</td>\n",
       "      <td>London</td>\n",
       "      <td>35.3</td>\n",
       "      <td>173.0</td>\n",
       "      <td>R</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>UK</td>\n",
       "      <td>Tim Key</td>\n",
       "      <td>male</td>\n",
       "      <td>02-Sep-1976</td>\n",
       "      <td>Virgo</td>\n",
       "      <td>28-Jul-2015</td>\n",
       "      <td>14208</td>\n",
       "      <td>38</td>\n",
       "      <td>40.67</td>\n",
       "      <td>17241</td>\n",
       "      <td>47</td>\n",
       "      <td>5</td>\n",
       "      <td>Y</td>\n",
       "      <td>England</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>47.35</td>\n",
       "      <td>177.8</td>\n",
       "      <td>R</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   series_num series_name     contestant_name  gender date_of_birth star_sign  \\\n",
       "0           1          UK       Frank Skinner    male   28-Jan-1957  Aquarius   \n",
       "1           1          UK     Josh Widdicombe    male   08-Apr-1983     Aries   \n",
       "2           1          UK  Romesh Ranganathan    male   27-Mar-1978     Aries   \n",
       "3           1          UK       Roisin Conaty  female   26-Mar-1979     Aries   \n",
       "4           1          UK             Tim Key    male   02-Sep-1976     Virgo   \n",
       "\n",
       "  first_ep_of_series_broadcast_date age_at_first_show_broadcast_date_days  \\\n",
       "0                       28-Jul-2015                                 21365   \n",
       "1                       28-Jul-2015                                 11799   \n",
       "2                       28-Jul-2015                                 13637   \n",
       "3                       28-Jul-2015                                 13273   \n",
       "4                       28-Jul-2015                                 14208   \n",
       "\n",
       "   age_at_first_show_broadcast_date average_age_in_series_years  \\\n",
       "0                                58                       40.67   \n",
       "1                                32                       40.67   \n",
       "2                                37                       40.67   \n",
       "3                                36                       40.67   \n",
       "4                                38                       40.67   \n",
       "\n",
       "  greg_age_in_series_days greg_age_in_series_years  seat_number  \\\n",
       "0                   17241                       47            1   \n",
       "1                   17241                       47            2   \n",
       "2                   17241                       47            4   \n",
       "3                   17241                       47            3   \n",
       "4                   17241                       47            5   \n",
       "\n",
       "  university_degree birth_country    birth_place distance_from_coast_miles  \\\n",
       "0                 Y       England  West Bromwich                     76.96   \n",
       "1                 Y       England         London                     38.59   \n",
       "2                 Y       England         Sussex                     20.61   \n",
       "3                 Y       England         London                      35.3   \n",
       "4                 Y       England      Cambridge                     47.35   \n",
       "\n",
       "   height_cm dominant_hand number_of_children_at_time_of_recording  \n",
       "0      178.0             R                                       1  \n",
       "1      169.0             R                                       0  \n",
       "2      182.0             R                                       3  \n",
       "3      173.0             R                                       0  \n",
       "4      177.8             R                                       0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contestant_info.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='episode_num', ylabel='running_episode_rank_inverse'>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "taskmaster_episode_winner = taskmaster_episode.loc[(taskmaster_episode['series_rank_inverse'] == 5)]\n",
    "#overall placement of winners throughout the series\n",
    "\n",
    "#no one goes below 3rd place and wins the series\n",
    "print(min(taskmaster_episode_winner['running_episode_rank_inverse']))\n",
    "sns.lineplot(x='episode_num', y='running_episode_rank_inverse', hue='contestant_name', markers = True, data=taskmaster_episode_winner)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Can performance at the end of episode 5 predict the winner?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "taskmaster_ep_5 = taskmaster_episode.loc[(taskmaster_episode['episode_num'] == 5)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Definitions of stats terms\n",
    "* r: what % of variation in your alcome is explained by your model (for example a r value of .87 means 87% of your rank is explained by episode 5) (want highest r)\n",
    "* p: the probability that the result you are seeing is from random chance (want a low p value) less than .05\n",
    "* coef - see what the relationship is between the main values how much does increasing x affect y \n",
    "* beta aka slope: affect something has on a line, multi regression has multiple slopes\n",
    "* intercept: average effect of the model (not useful for this model), so what you would assume if you have nothing\n",
    "* std_err: +/- of effect we're talking about, aka margin of error. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r: 0.8336765469297961\n",
      "p: 2.4254663629453075e-11\n",
      "beta: 0.814070351758794\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             OLS Regression Results                            \n",
      "===============================================================================\n",
      "Dep. Variable:     series_rank_inverse   R-squared:                       0.695\n",
      "Model:                             OLS   Adj. R-squared:                  0.687\n",
      "Method:                  Least Squares   F-statistic:                     86.60\n",
      "Date:                 Thu, 01 Dec 2022   Prob (F-statistic):           2.43e-11\n",
      "Time:                         21:52:19   Log-Likelihood:                -45.818\n",
      "No. Observations:                   40   AIC:                             95.64\n",
      "Df Residuals:                       38   BIC:                             99.01\n",
      "Df Model:                            1                                         \n",
      "Covariance Type:             nonrobust                                         \n",
      "================================================================================================\n",
      "                                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "Intercept                        0.5264      0.298      1.767      0.085      -0.077       1.130\n",
      "running_episode_rank_inverse     0.8141      0.087      9.306      0.000       0.637       0.991\n",
      "==============================================================================\n",
      "Omnibus:                        1.353   Durbin-Watson:                   1.880\n",
      "Prob(Omnibus):                  0.508   Jarque-Bera (JB):                1.037\n",
      "Skew:                           0.391   Prob(JB):                        0.595\n",
      "Kurtosis:                       2.899   Cond. No.                         8.82\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "x = taskmaster_ep_5['running_episode_rank_inverse']\n",
    "y = taskmaster_ep_5['series_rank_inverse']\n",
    "slope, intercept, r, p, std_err = stats.linregress(x, y)\n",
    "show_regression(x, y)\n",
    "\n",
    "reg = smf.ols('series_rank_inverse ~ running_episode_rank_inverse',data=taskmaster_ep_5).fit()\n",
    "print(reg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on our r value we can see there is a very strong causation with episode 5 performance and winner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ep_5_crosstab = crosstab(taskmaster_ep_5['series_rank_inverse'], taskmaster_ep_5['running_episode_rank_inverse'])\n",
    "make_heatmap(ep_5_crosstab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ep_5_crosstab_perc = crosstab(taskmaster_ep_5['series_rank_inverse'], taskmaster_ep_5['running_episode_rank_inverse'], True)\n",
    "make_heatmap(ep_5_crosstab_perc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Crosstabs shows population distribution clusters towards keeping performance at midpoint and end of series\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "taskmaster_ep_5['is_series_winner'] = taskmaster_ep_5['series_rank_inverse'] == 5\n",
    "taskmaster_ep_5['is_first_place_running_ep_5'] = taskmaster_ep_5['running_episode_rank_inverse'] == 5\n",
    "\n",
    "ep_5_crosstab = crosstab(taskmaster_ep_5['is_series_winner'], taskmaster_ep_5['is_first_place_running_ep_5'], True)\n",
    "make_heatmap(ep_5_crosstab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "it's interesting how the given winner of Ep 5 isn't always the winner, but doing better def helps\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r: 0.8133373615325548\n",
      "p: 1.1710278017321259e-95\n",
      "beta: 0.8299039780521256\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             OLS Regression Results                            \n",
      "===============================================================================\n",
      "Dep. Variable:     series_rank_inverse   R-squared:                       0.662\n",
      "Model:                             OLS   Adj. R-squared:                  0.661\n",
      "Method:                  Least Squares   F-statistic:                     777.8\n",
      "Date:                 Thu, 01 Dec 2022   Prob (F-statistic):           1.17e-95\n",
      "Time:                         22:50:13   Log-Likelihood:                -479.03\n",
      "No. Observations:                  400   AIC:                             962.1\n",
      "Df Residuals:                      398   BIC:                             970.0\n",
      "Df Model:                            1                                         \n",
      "Covariance Type:             nonrobust                                         \n",
      "================================================================================================\n",
      "                                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "Intercept                        0.4358      0.102      4.273      0.000       0.235       0.636\n",
      "running_episode_rank_inverse     0.8299      0.030     27.890      0.000       0.771       0.888\n",
      "==============================================================================\n",
      "Omnibus:                        8.601   Durbin-Watson:                   2.192\n",
      "Prob(Omnibus):                  0.014   Jarque-Bera (JB):               14.441\n",
      "Skew:                          -0.028   Prob(JB):                     0.000731\n",
      "Kurtosis:                       3.929   Cond. No.                         9.33\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "x = taskmaster_episode['running_episode_rank_inverse']\n",
    "y = taskmaster_episode['series_rank_inverse']\n",
    "slope, intercept, r, p, std_err = stats.linregress(x, y)\n",
    "show_regression(x,y)\n",
    "\n",
    "reg = smf.ols('series_rank_inverse ~ running_episode_rank_inverse',data=taskmaster_episode).fit()\n",
    "print(reg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on our r value we can see there is a very strong correlation with running performance and winner, even when looking at more than just episode 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Do the traits of the contestant matter?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             OLS Regression Results                            \n",
      "===============================================================================\n",
      "Dep. Variable:     series_rank_inverse   R-squared:                       0.222\n",
      "Model:                             OLS   Adj. R-squared:                  0.210\n",
      "Method:                  Least Squares   F-statistic:                     18.68\n",
      "Date:                 Thu, 01 Dec 2022   Prob (F-statistic):           3.83e-19\n",
      "Time:                         22:53:49   Log-Likelihood:                -645.49\n",
      "No. Observations:                  400   AIC:                             1305.\n",
      "Df Residuals:                      393   BIC:                             1333.\n",
      "Df Model:                            6                                         \n",
      "Covariance Type:             nonrobust                                         \n",
      "======================================================================================================\n",
      "                                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------------\n",
      "Intercept                             -8.0642      1.985     -4.062      0.000     -11.967      -4.161\n",
      "university_degree[T.OXBRIDGE]         -1.2381      0.222     -5.566      0.000      -1.675      -0.801\n",
      "university_degree[T.OXBRIDGE/YALE]    -1.1255      0.415     -2.710      0.007      -1.942      -0.309\n",
      "university_degree[T.Y]                -1.2273      0.179     -6.850      0.000      -1.580      -0.875\n",
      "gender[T.male]                        -0.6565      0.176     -3.734      0.000      -1.002      -0.311\n",
      "age_at_first_show_broadcast_date       0.0109      0.007      1.541      0.124      -0.003       0.025\n",
      "height_cm                              0.0690      0.011      6.327      0.000       0.048       0.090\n",
      "==============================================================================\n",
      "Omnibus:                       16.478   Durbin-Watson:                   0.237\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               11.921\n",
      "Skew:                           0.311   Prob(JB):                      0.00258\n",
      "Kurtosis:                       2.428   Cond. No.                     5.81e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 5.81e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "taskmaster_episode = pd.merge(taskmaster_episode, contestant_info[['age_at_first_show_broadcast_date', 'university_degree', 'birth_country', 'height_cm', 'gender', 'contestant_name']], on=['contestant_name'], how='inner')\n",
    "\n",
    "reg = smf.ols('series_rank_inverse ~ age_at_first_show_broadcast_date + university_degree  + height_cm + gender',data=taskmaster_episode).fit()\n",
    "print(reg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Based on our matrix we can see that some values have positive (height, age) and negative (going to Oxbridge, being male)\n",
    "* Being male is interesting as Greg (the judge) has been stated as being sexist towards women so it looks like he's overcorrected himself\n",
    "* We also see birth country has little to no relation to overall performance, this is likely due to a small diversity (most contestants are from the UK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr_matrix = taskmaster_episode[['series_rank_inverse', 'age_at_first_show_broadcast_date','height_cm']].corr()\n",
    "sns.heatmap(corr_matrix, annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             OLS Regression Results                            \n",
      "===============================================================================\n",
      "Dep. Variable:     series_rank_inverse   R-squared:                       0.073\n",
      "Model:                             OLS   Adj. R-squared:                  0.070\n",
      "Method:                  Least Squares   F-statistic:                     31.17\n",
      "Date:                 Thu, 01 Dec 2022   Prob (F-statistic):           4.38e-08\n",
      "Time:                         22:52:08   Log-Likelihood:                -680.60\n",
      "No. Observations:                  400   AIC:                             1365.\n",
      "Df Residuals:                      398   BIC:                             1373.\n",
      "Df Model:                            1                                         \n",
      "Covariance Type:             nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "Intercept       2.2625      0.156     14.509      0.000       1.956       2.569\n",
      "seat_number     0.2625      0.047      5.583      0.000       0.170       0.355\n",
      "==============================================================================\n",
      "Omnibus:                      126.552   Durbin-Watson:                   0.223\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               20.757\n",
      "Skew:                          -0.110   Prob(JB):                     3.11e-05\n",
      "Kurtosis:                       1.906   Cond. No.                         8.37\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "reg = smf.ols('series_rank_inverse ~  seat_number',data=taskmaster_episode).fit()\n",
    "print(reg.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seat number has a small but not 0 impact, this was checked based on the fact that contestants with seat position 1 (which is determined alphabetically) do worse consistently"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Futher things that can be done with this"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CS Development\n",
    "look into turning into a class with methods\n",
    " - Only one call to a class per question\n",
    " - Create class specific to own needs\n",
    " - Design patterns object oriented software\n",
    " - Group together functions\n",
    "\n",
    "## Data Science\n",
    " - Build class for analysis on the dataframe\n",
    " - Look into one-hot encoding\n",
    " - Look into ML, see if you can predict winner based on first 8 episodes for each series\n",
    " - Calculation % of points from objective vs subjective\n",
    " \n",
    "Articles\n",
    "- https://machinelearningmastery.com/why-one-hot-encode-data-in-machine-learning\n",
    "- https://en.wikipedia.org/wiki/Overfitting\n",
    "- http://sites.utexas.edu/sos/guided/inferential/numeric/bivariate/rankcor/"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
